# Replacements for GLesmos

*plugin* `GLesmos`

## Add a fill menu option for switching an expression to glesmos rendering mode

Warning: this is duplicated below ("Add a lines menu option...") rather than
adding an extra section to the menu view.

*Description* `Add toggle in "fill" menu to enable GLesmos`

*Find* => `element`
```js
createElement(
  'div',
  { class: $DCGView.const('dcg-options-menu-content') },
  $DCGView.createElement(
    'div',
    {
      class: $DCGView.const(
        'dcg-iconed-mathquill-row dcg-fill-opacity-row'
      )
    },
    __rest0__
  ),
  __rest1__
)
```

*Find* inside `element`
```js
createElement(
  'div',
  { class: $.const('dcg-options-menu-content') },
  __rest__
)
```

*Find_surrounding_template* `element` => `template`

*Find* inside `template`
```js
createElement($ToggleView, {
  ariaLabel: () => this.controller.s("graphing-calculator-narration-fill-visible")
```

Just add one more child.

*Replace* `__rest__` with
```js
__rest__,
DSM.insertElement(() => DSM.glesmos?.glesmosToggle(this.id, $ToggleView, true))
```

## Add a lines menu option for switching an expression to glesmos rendering mode

Warning: this is duplicated above ("Add a fill menu option...").

*Description* `Add toggle in "lines" menu to enable GLesmos`

*Find* => `key`
```js
{ class: $DCGView.const('dcg-iconed-mathquill-row dcg-line-opacity-row') }
```

*Find_surrounding_template* `key` => `template`

*Find* inside `template`
```js
createElement(
  'div',
  { class: $.const('dcg-options-menu-content') },
  __rest__
)
```

*Find* inside `template`
```js
createElement($ToggleView, {
  ariaLabel: () => this.controller.s("graphing-calculator-narration-lines-visible")
```

Just add one more child.

*Replace* `__rest__` with
```js
__rest__,
DSM.insertElement(() => DSM.glesmos?.glesmosToggle(this.id, $ToggleView, false))
```

## Add a lines menu option for confirming GLesmos lines

*Description* `Add toggle to confirm GLesmos lines`

*Find* => `options`
```js
$DCGView.createElement("div",
  { class: $DCGView.const("dcg-options-flex-container") },
  $DCGView.createElement("div",
    { class: $DCGView.const("dcg-options-left-side") },
    $DCGView.createElement("div", {
      class: $DCGView.const("dcg-iconed-mathquill-row dcg-line-opacity-row")
```

*Find_surrounding_template* `options` => `template`

*Find* inside `template`
```js
createElement($ToggleView, {
  ariaLabel: () => this.controller.s("graphing-calculator-narration-lines-visible")
```

Prefix with a child

*Replace* `options` with
```js
DSM.insertElement(() => DSM.glesmos?.confirmLines(this.id, $ToggleView)),
__options__
```

## Replace main renderer with glesmos rendering when necessary

*Description* `Draw GLesmos code`

*Find*

```js
drawSketchToCtx({
  sketch: $sketch, drawContext: $drawCtx, poiLabelsLayer: $n,
  clickableObjectsLayer: $o, geometryContext: $a, showMovablePoints: $l
}) {__body__}
```

*Find* inside `__body__` => `guard`

```js
if (!$ee.branches || !$ee.branches.length) return;
```

*Replace* `guard` with

```js
__guard__
// allow-ids: of
DesModder.drawGLesmosSketchToCtx?.($drawCtx, $sketch);
```

## Pass GLesmos flag to worker

*Description* `Pass GLesmos flag to the web worker`

*Find*
```js
addStatement($stmt) {
  __body__
}
```

*Replace* `body` with
```js
if ($stmt.type === "statement") {
  $stmt.glesmos = DSM.glesmos?.isGlesmosMode($stmt.id);
  $stmt.glesmosLinesConfirmed = DSM.glesmos?.isGLesmosLinesConfirmed($stmt.id);
}
__body__
```

## Replace quadtree implicit tracing with glesmos compilation

*Description* `Compile GLesmos code instead of running implicit plotter`

*worker_only*

*Find* 
```js
._graph = $_graphFunc;
function $_graphFunc(____) {
  __graph__
}
```

The code loops over the different IR objects `$ir`.

*Find* inside `graph`
```js
.wrap($).eachElement(($ir, $) => {
  __body__
})
```

The `styles` object provides `styles.fillOpacity` and `styles.color`.

*Find* inside `body`
```js
$styles.fillOpacity =
```

This is just for finding the `$graphs` list.

*Find* inside `body`
```js
if ($W !== void 0 && $X !== void 0 && isFinite($W) && isFinite($X)) {
  let $ie = $a(____);
  $graphs.push(____)
}
```

*Find* inside `body` => `if2d`
```js
if (!$is3d($T.graphMode) || ____) {
```

*Replace* `if2d` with
```js
if (this.userData.glesmos && self.dsm_compileGLesmos) {
  const lines =
    this.userData.lines !== false &&
    (!this.isInequality() || this.userData.glesmosLinesConfirmed);
  let derivativeX, derivativeY;
  if (lines) {
    try {
      derivativeX = $ir.takeDerivative('x');
      derivativeY = $ir.takeDerivative('y');
    } catch {}
  }
  const newCompiled = self.dsm_compileGLesmos(
    $ir, $styles.color, $styles.fillOpacity ?? 0, $styles.lineOpacity, this.userData.lines !== false ? $styles.lineWidth : 0.0,
    derivativeX, derivativeY
  );
  $graphs.push({
    graphMode: "GLesmos",
    compiledGL: newCompiled,
    segments: [],
    poi: {}
  })
} else __if2d__
```

### Alternative

*Description* `Compile GLesmos code instead of running implicit plotter`

*worker_only*

*Find* 
```js
._graph = $_graphFunc;
function $_graphFunc(____) {
  __graph__
}
```

The code loops over the different IR objects `$ir`.

*Find* inside `graph` => `compute2d`
```js
let $branch = $c({
  viewState: $viewState,
  graphInfo: $graphInfo,
  compiled: $compiled,
  derivative: $derivative
})
```

*Find* inside `graph`
```js
$ = $ir.getCompiledFunction($)
```

*Replace* `compute2d` with
```js
if (this.userData.glesmos && self.dsm_compileGLesmos) {
  const lines =
    this.userData.lines !== false &&
    (!this.isInequality() || this.userData.glesmosLinesConfirmed);
  let derivativeX, derivativeY;
  if (lines) {
    try {
      derivativeX = $ir.takeDerivative('x');
      derivativeY = $ir.takeDerivative('y');
    } catch {}
  }
  const newCompiled = self.dsm_compileGLesmos(
    $ir, $graphInfo.color, $graphInfo.fillOpacity ?? 0, $graphInfo.lineOpacity, this.userData.lines !== false ? $graphInfo.lineWidth : 0.0,
    derivativeX, derivativeY
  );
  return [{
    graphMode: "GLesmos",
    compiledGL: newCompiled,
    segments: [],
    poi: {}
  }]
}
__compute2d__
```
