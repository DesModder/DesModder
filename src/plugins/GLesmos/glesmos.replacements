# Replacements for GLesmos

*plugin* `GLesmos`

## Add a fill menu option for switching an expression to glesmos rendering mode

Warning: this is partially duplicated below ("Add a lines menu option...") rather than
adding an extra section to the menu view.

*Description* `Add toggle in "fill" menu to enable GLesmos`

*Find* => `key`
```js
{ class: $$const('dcg-iconed-mathquill-row dcg-fill-opacity-row') ____ }
```

*Find_surrounding_template* `key` => `template`

*Find* inside `template`
```js
$createElement(
  'div',
  {
    class: $$const('dcg-options-menu-content'),
    children: __children__
  }
)
```

*Find* inside `template`
```js
$createElement2($ToggleView, {
  ariaLabel: () => this.controller.s("graphing-calculator-narration-fill-visible")
```

Just add one more child.

*Replace* `children` with
```js
[
  __children__,
  DesModder.insertElement(() => DSM.glesmos?.glesmosToggle(this.model.id, $ToggleView, true))
]
```

## Add a lines menu option for switching an expression to glesmos rendering mode

Warning: this is partially duplicated above ("Add a fill menu option...").

*Description* `Add toggle in "lines" menu to enable GLesmos and confirm lines`

*Find* => `key`
```js
{ class: $$const('dcg-iconed-mathquill-row dcg-line-opacity-row') ____ }
```

*Find_surrounding_template* `key` => `template`

*Find* inside `template`
```js
$createElement(
  'div',
  {
    class: $$const('dcg-options-menu-content'),
    children: __children__
  }
)
```

*Find* inside `template`
```js
$createElement2($ToggleView, {
  ariaLabel: () => this.controller.s("graphing-calculator-narration-lines-visible")
```

Add one child before and one after.

*Replace* `children` with
```js
[
  DesModder.insertElement(() => DSM.glesmos?.confirmLines(this.model.id, $ToggleView)),
  __children__,
  DesModder.insertElement(() => DSM.glesmos?.glesmosToggle(this.model.id, $ToggleView, false))
]
```

## Replace main renderer with glesmos rendering when necessary

*Description* `Draw GLesmos code`

*Find*

```js
drawSketchToCtx({
  sketch: $sketch, drawContext: $drawCtx, ____
}) {__body__}
```

*Find* inside `__body__` => `guard`

```js
if (!$ee.branches || !$ee.branches.length) return;
```

*Replace* `guard` with

```js
__guard__
window.DesModder?.drawGLesmosSketchToCtx?.(window.Calc.controller, $drawCtx, $sketch);
```

## Pass GLesmos flag to worker

*Description* `Pass GLesmos flag to the web worker`

*Find* => `addStatement`
```js
addStatement($stmt) {
  this.applyToChangeSets(__callback__)
}
```

*Replace* `addStatement` with
```js
addStatement($stmt) {
  if ($stmt.type === "statement" && DSM.glesmos?.isGlesmosMode($stmt.id)) {
    $stmt = {
      ...$stmt,
      glesmos: true,
      glesmosLinesConfirmed: DSM.glesmos?.isGLesmosLinesConfirmed($stmt.id)
    }
  }
  this.applyToChangeSets(__callback__)
}
```

## Replace quadtree implicit tracing with glesmos compilation

*Description* `Compile GLesmos code instead of running implicit plotter`

*worker_only*

*Find* => `branchesReplacement`
```js
branchesReplacement: function (____) {
  ____
}
```

*Replace* `branchesReplacement` with

```js
branchesReplacement: function (
  graphProps,
  concrete,
  graphInfo,
  emitGLSL
) {
  const { userData } = graphProps;
  if (!userData.glesmos)
    return undefined;
  // 8 == GRAPHMODE.IMPLICIT
  if (graphInfo.graphMode !== 8) {
    return undefined;
  }
  const isEquality = graphInfo.operator === '=';
  const lines =
    userData.lines !== false &&
    (isEquality || userData.glesmosLinesConfirmed);
  let derivativeX, derivativeY;
  if (lines) {
    try {
      derivativeX = concrete.takeDerivative('x');
      derivativeY = concrete.takeDerivative('y');
    } catch {}
  }
  const newCompiled = self.dsm_compileGLesmos(
    concrete, graphInfo.color, graphInfo.fillOpacity ?? 0, graphInfo.lineOpacity, userData.lines !== false ? graphInfo.lineWidth : 0.0,
    derivativeX, derivativeY, emitGLSL
  );
  return [{
    graphMode: "GLesmos",
    compiledGL: newCompiled,
    segments: [],
    poi: {}
  }]
}
```
