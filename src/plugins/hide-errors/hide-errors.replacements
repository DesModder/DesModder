# Replacements for Hide Errors

*plugin* `hide-errors`

## Prevent enter/shift-enter from creating sliders

*Description* `Prevent enter and shift-enter from creating sliders`

*Find* => `from`
```js
  $cc.areSlidersEnabled())
  return $cc.createSlidersForItem($model.id
```

*Replace* `from` with
```js
  $cc.areSlidersEnabled() &&
  !DSM.hideErrors?.isErrorHidden($model.id)
)
  return $cc.createSlidersForItem($model.id
```

## Pass in ID to error triangle

*Description* `Wrap error triangle to control its style`

*Find* => `from`
```js
error: () => $DCGView.createElement($TooltippedError, {
    error: $e.bindFn($e.getErrorMsg),
    __opts__
  })
```

*Find_surrounding_template* `from` => `template`

*Find* inside `template`
```js
$this.bindFn($this.getIconMode)
```

*Replace* `from` with
```js
error: () => $DCGView.createElement($TooltippedError, {
    error: $e.bindFn($e.getErrorMsg),
    exprId: () => $this.model.id,
    __opts__
  })
```

## Wrap error triangle with div for onTap and opacity control

*Description* `Wrap error triangle to control its style`

Wrap the error message tooltipped-error with a div, using `onTap` to trigger hiding/showing the error (but only when shift is held).

*Find* => `from`
```js
$DCGView.createElement($Tooltip,
  {
    tooltip: this.props.error,
    __opts__
  },
  __errorTriangle__
)
```

*Replace* `errorTriangle` with
```js
DSM.replaceElement(
  () => __errorTriangle__,
  () => DSM.hideErrors?.errorTriangle(this.props.exprId?.() ?? "")
)
```

## Add a "hide" button to the slider prompts

*Description* `Add a "hide" button to the slider prompts`

*Find* => `element`
```js
createElement(
  'span',
  { class: $DCGView.const('btns') },
  __children__
)
```

Add one more child for the hide button

*Replace* `children` with
```js
__children__,
DSM.insertElement(() => DSM.hideErrors?.hideButton(() => this.model))
```

## Disable slider creation prompt if error is hidden

*Description* `Disable slider prompts if error is hidden`

*Find* => `from`
```js
shouldShowSliderPrompt() {
  let
```

*Replace* `from` with
```js
shouldShowSliderPrompt() {
    if (DSM.hideErrors?.isErrorHidden(this.model?.id)) return false;
    let
```

## Allow shift-enter to create a new expression and hide errors on the old expression

*Description* `Hide errors on shift-enter`

*Find* => `from`
```js
if ($e === "Enter")
  return $t && ($t.preventDefault(), $t.stopPropagation()),
    this.controller.dispatch({ type: "on-special-key-pressed", key: "Enter" })
```

*Replace* `from` with
```js
__from__
else if ("Shift-Enter" === $e) {
  DSM.hideErrors?.hideError(this.model.id);
  return this.controller.dispatch({
    type: "on-special-key-pressed",
    key: "Enter"
  })
}
```
