# Core Replacements

*plugin* `workaround-core`

Replacements that apply to more than one plugin.

## Duplicate metadata when an expression is duplicated

*module* `main/controller`

*Find*
```js
copyExpressionToIndex = function(____) { __body__ }
```

*Find* inside `body`:
```js
var $to = this.createItemModel(
  $TSlib.__assign($TSlib.__assign({}, $from), { id: this.generateId() })
)
```

*Replace* `body` with
```js
__body__;
window.DesModder?.controller?.duplicateMetadata($to.id, $from.id)
```

## Insert panels on the expressions list

This is relevant to both pin-expressions and text-mode.

*module* `expressions/list-view`

*Find* => `element`
```js
$DCGView.createElement(
  "div",
  {
    class: function () {
      return {
        "dcg-exppanel-container" ____
      }
    },
    ____
  },
  __children__
)
```

*Find_surrounding_template* `element` => `template`

*Find* inside `template`
```js
var $this = this;
```

*Replace* `children` with
```js
__children__,
// pinned expressions
$DCGView.createElement(
  $DCGView.Components.For,
  {
    each: function () {
      return window.DesModder?.controller?.isTextMode?.()
        ? [] 
        : $this.controller.getAllItemModels();
    },
    key: function (e) {
      return e.guid;
    }
  },
  $DCGView.createElement(
    "div",
    {
      class: $DCGView.const("dsm-pinned-expressions dcg-exppanel"),
      style: () => ({
        background: $this.controller.getBackgroundColor()
      })
    },
    function (t) {
      return $DCGView.createElement(
        $DCGView.Components.If,
        {
          predicate: () => window.DesModder?.controller?.isExpressionPinned(t.id)
        },
        // marking as a drag copy causes it not to affect the render shells calcuations
        // (all the logic is present already because if the top expression is dragged
        // to the bottom, it shouldn't cause all expressions to render from the top)
        () => $this.makeDragCopyViewForModel(t)
      )
    }
  )
),
// text mode panel
$DCGView.createElement(
  $DCGView.Components.If,
  {
    predicate: () => window.DesModder?.controller?.inTextMode?.()
  },
  () => $DCGView.createElement(
    "div",
    {
      class: $DCGView.const("dsm-text-editor-container"),
      didMount: div => window.DesModder?.controller?.exposedPlugins["text-mode"].mountEditor(div),
      willUnmount: div => window.DesModder?.controller?.exposedPlugins["text-mode"].unmountEditor(div)
    }
  )
)
```

## Create Element Replacements

*Module* `final-load`

*Find* => `init`
```js
require(['toplevel/calculator_desktop'])
```

*Replace* `init` with
```js
{
  const dcgview = require("dcgview");

  function overrideCreateElement(className, repl) {
    const oldCreateElement = dcgview.createElement;
    dcgview.createElement = function (_, opts) {
      let c;
      if (
        typeof opts === "object" &&
        opts !== null &&
        "class" in opts &&
        typeof opts.class === "function" &&
        ((c = opts.class()),
        typeof c === "object"
          ? c[className]
          : typeof c === "string" && c === className)
      ) {
        return repl(arguments, oldCreateElement);
      } else return oldCreateElement(...arguments);
    };
  }

  // FIXME: Uncaught Error: Cannot remount a DCGElement
  //    may be related to computing args unconditionally
  // but this code is not actually necessary; just saves performance from
  // rendering mathquill
  // // Hide dcg-exppanel when in text mode
  // overrideCreateElement("dcg-exppanel", (args, oldCreateElement) =>
  //   oldCreateElement(
  //     dcgview.Components.If,
  //     {
  //       predicate: () => !window.DesModder?.controller?.inTextMode?.(),
  //     },
  //     () => oldCreateElement(...args)
  //   )
  // );

  // Replace branding for show tips
  overrideCreateElement("dcg-expressions-branding", (args, oldCreateElement) =>
    oldCreateElement(
      ...args,
      oldCreateElement(
        dcgview.Components.If,
        {
          predicate: () =>
            window.DesModder?.controller?.isPluginEnabled?.("show-tips"),
        },
        () => window.DesModder?.view?.createTipElement()
      )
    )
  );
}

__init__
```
