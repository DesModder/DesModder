# Better Evaluation View Replacements

*plugin* `better-evaluation-view`

## Override evaluation view

*Description* `Override the evaluation view`

Bindings

*Find*
```js
fraction: () => $Dcgview.createElement($StaticMathquillViewDefault, {latex
```

Show exposed undefined values

*Find* => `undefined`
```js
undefined: () =>  $.createElement(
    'span',
    null,
    $.const("undefined")
  )
```

*Replace* `undefined` with
```js
undefined: () => $Dcgview.Components.IfElse(
    () => DSM.betterEvaluationView,
    {
      true: () => $Dcgview.createElement(
        $StaticMathquillViewDefault,
        {
          latex: () => this.getNumberLabel().value,
          config: $Dcgview.const({})
        }
      ),
      false: () => $Dcgview.createElement(
        "span",
        null,
        $Dcgview.const("undefined")
      )
    }
  )
```

Show list elements

*Find* => `list`
```js
()=>this.getEvaluationType(), {
list: () => $.createElement(__oldList__)
```

*Replace* `list` with
```js
()=>this.getEvaluationType(), {
list: () => $Dcgview.Components.IfElse(
    () => DSM.betterEvaluationView?.settings.lists,
    {
      true: () => $Dcgview.createElement(
        $StaticMathquillViewDefault,
        {
          latex: () => {
            let values = this.props.val()
            let labelOptions = {
              smallCutoff: 0.00001,
              bigCutoff: 1000000,
              digits: 5,
              displayAsFraction: false
            }
            let length = 20
            let labels = values.slice(0,length).map(label => Desmos.Private.Mathtools.Label.truncatedLatexLabel(label, labelOptions))
            return "\\left[" + labels.join(",") + (values.length > length ? `\\textcolor{gray}{...\\mathit{${values.length - length}\\ more}}` : "") + "\\right]"
          },
          config: $Dcgview.const({})
        }
      ),
      false: () => $Dcgview.createElement(__oldList__)
    }
  )
```

Show color values
*Find* => `color`
```js
rgbcolor: () => $.createElement(__swatch__)
```

*Replace* `color` with
```js
rgbcolor: () => $Dcgview.createElement(
    "div",
    {
      class: $Dcgview.const("dsm-color-container")
    },
    $Dcgview.createElement(
      $Dcgview.Components.If,
      {
        predicate: () => {
          let isEnabled = DSM.betterEvaluationView
          let pluginSettings = DSM.betterEvaluationView?.settings
          let isArray = Array.isArray(this.props.val())
          return isEnabled && pluginSettings.colors && (!isArray || pluginSettings.lists && pluginSettings.colorLists)
        }
      },
      () => $Dcgview.createElement(
        $StaticMathquillViewDefault,
        {
          latex: () => {
            // allow-ids: rgb, hex
            let color = this.props.val()
            // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
            function rgb(hex) {
              let result = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
              return [
                parseInt(result[1], 16),
                parseInt(result[2], 16),
                parseInt(result[3], 16)
              ]
            }
            let length = 6
            if (Array.isArray(color)) {
              color = color.map(rgb)
              return "\\operatorname{rgb}\\left(\\left[" + color.slice(0,length).map(clist=>`\\left(${clist.join(",")}\\right)`).join(",") + (color.length > length ? `\\textcolor{gray}{...\\mathit{${color.length - length}\\ more}}` : "") + "\\right]\\right)"
            } else {
              color = rgb(color)
              return "\\operatorname{rgb}\\left(" + color.join(",") + "\\right)"
            }
          },
          config: $Dcgview.const({})
        }
      )
    ),
    $Dcgview.createElement(__swatch__)
  )
```

## Return more info from numericLabels

*Description* `Distinguish 0 vs -0 and NaN vs -∞ vs +∞`

*worker_only*

Add a value field to "undefined" labels

*Find* => `undefined`
```js
if ($options = $options || {}, isNaN($val) || !isFinite($val)) return { type: "undefined" }
```

*Replace* `undefined` with
```js
if ($options = $options || {}, isNaN($val) || !isFinite($val)) return { type: "undefined", value: isNaN($val) ? "\\mathrm{NaN}" : $val === Infinity ? "\\infty" : $val === -Infinity ? "-\\infty" : "undefined"}
```

Distinguish between 0 and -0

*Find* => `zero`
```js
if ($ === 0 || $.zeroCutoff && Math.abs($) < $.zeroCutoff)
  return {
    type: 'decimal',
    value: '0'
  }
```

*Replace* `zero` with
```js
if ($val === 0) {
  if (!DSM.betterEvaluationView || Object.is($val, 0)) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
} else if ($options.zeroCutoff && Math.abs($val) < $options.zeroCutoff) {
  if (!DSM.betterEvaluationView || Math.sign($val) === 1) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
}
```
