# Better Evaluation View Replacements

*plugin* `better-evaluation-view`

## Override evaluation view

*Description* `Override the evaluation view`

Bindings

*Find*
```js
fraction: () => $Dcgview.createElement($StaticMathquillViewDefault, {latex
```

Show exposed undefined values

*Find* => `undefined`
```js
undefined: () =>  $.createElement(
    'span',
    null,
    $.const("undefined")
  )
```

*Replace* `undefined` with
```js
undefined: () => $Dcgview.Components.IfElse(
    () => DSM.betterEvaluationView,
    {
      true: () => $Dcgview.createElement(
        $StaticMathquillViewDefault,
        {
          latex: () => this.getNumberLabel().value,
          config: $Dcgview.const({})
        }
      ),
      false: () => $Dcgview.createElement(
        "span",
        null,
        $Dcgview.const("undefined")
      )
    }
  )
```

Show list elements

*Find* => `list`
```js
()=>this.getEvaluationType(), {
list: () => $.createElement(__oldList__)
```

*Replace* `list` with
```js
()=>this.getEvaluationType(), {
list: () => DSM.replaceElement(
  () => $Dcgview.createElement(__oldList__),
  () => DSM.betterEvaluationView?.listEvaluation(() => this.props.val())
)
```

Show color values
*Find* => `color`
```js
rgbcolor: () => $.createElement(__swatch__)
```

*Replace* `color` with
```js
rgbcolor: () => DSM.replaceElement(
  () => $Dcgview.createElement(__swatch__),
  () => DSM.betterEvaluationView?.colorEvaluation(() => this.props.val())
)
```

## Return more info from numericLabels

*Description* `Distinguish 0 vs -0 and NaN vs -∞ vs +∞`

*worker_only*

Add a value field to "undefined" labels

*Find* => `undefined`
```js
if ($options = $options || {}, isNaN($val) || !isFinite($val)) return { type: "undefined" }
```

*Replace* `undefined` with
```js
if ($options = $options || {}, isNaN($val) || !isFinite($val)) return { type: "undefined", value: isNaN($val) ? "\\mathrm{NaN}" : $val === Infinity ? "\\infty" : $val === -Infinity ? "-\\infty" : "undefined"}
```

Distinguish between 0 and -0

*Find* => `zero`
```js
if ($ === 0 || $.zeroCutoff && Math.abs($) < $.zeroCutoff)
  return {
    type: 'decimal',
    value: '0'
  }
```

*Replace* `zero` with
```js
if ($val === 0) {
  if (!DSM.betterEvaluationView || Object.is($val, 0)) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
} else if ($options.zeroCutoff && Math.abs($val) < $options.zeroCutoff) {
  if (!DSM.betterEvaluationView || Math.sign($val) === 1) {
    return {
      type: "decimal",
      value: "0"
    }
  } else {
    return {
      type: "decimal",
      value: "-0"
    }
  }
}
```

## Distinguish NaN, +∞, -∞ in lists.

*Description* `Distinguish NaN, +∞, -∞ in lists.`

I'm really confused. The match doesn't work without *worker_only*, but the code
runs on the main page, not the worker.

*worker_only*

*Find* => `truncatedLatexLabelDef`
```js
function $truncatedLatexLabel($e, $t) {
    let $r = $numericLabel($e, $t);
    switch ($r.type) {
    case "undefined":
        return "undefined";
    case "decimal":
        return $r.value;
    case "scientific":
        return $r.mantissa + "\\times10^{" + $r.exponent + "}";
```

*Replace* `truncatedLatexLabelDef` with
```js
function $truncatedLatexLabel($e, $t) {
    let $r = $numericLabel($e, $t);
    switch ($r.type) {
    case "undefined":
        return DSM.betterEvaluationView ? $r.value : 'undefined';
    case "decimal":
        return $r.value;
    case "scientific":
        return $r.mantissa + "\\times10^{" + $r.exponent + "}";
```
